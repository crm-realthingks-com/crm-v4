
import { useState } from "react";
import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { useToast } from "@/hooks/use-toast";
import { DealForm } from "./DealForm";
import { supabase } from "@/integrations/supabase/client";
import { Deal } from "@/types/deal";
import { useUserDisplayNames } from "@/hooks/useUserDisplayNames";

interface Lead {
  id: string;
  lead_name: string;
  company_name?: string;
  country?: string;
  contact_owner?: string;
  created_by?: string;
}

interface ConvertToDealModalProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  lead: Lead | null;
  onSuccess: () => void;
}

export const ConvertToDealModal = ({ open, onOpenChange, lead, onSuccess }: ConvertToDealModalProps) => {
  const { toast } = useToast();

  // Get display names for lead owner
  const leadOwnerIds = lead?.created_by ? [lead.created_by] : [];
  const { displayNames } = useUserDisplayNames(leadOwnerIds);

  if (!lead) return null;

  const handleSaveDeal = async (dealData: Partial<Deal>) => {
    try {
      console.log("Converting lead to deal with data:", dealData);
      
      // Get current user for created_by field
      const { data: { user }, error: userError } = await supabase.auth.getUser();
      
      if (userError || !user) {
        throw new Error("User not authenticated");
      }

      // Ensure required fields are present and remove any undefined/null values that could cause UUID errors
      const dealToInsert = {
        deal_name: dealData.deal_name || `Deal for ${lead.lead_name}`,
        stage: dealData.stage || 'Lead',
        project_name: dealData.project_name || '',
        customer_name: dealData.customer_name || lead.company_name || '',
        lead_name: dealData.lead_name || lead.lead_name,
        lead_owner: dealData.lead_owner || (lead.created_by ? displayNames[lead.created_by] || 'Unknown User' : ''),
        region: dealData.region || lead.country || '',
        priority: dealData.priority || 3,
        created_by: user.id, // Ensure created_by is set for RLS
        // Only include fields that have actual values to avoid UUID parsing errors
        ...(dealData.currency_type && { currency_type: dealData.currency_type }),
        ...(dealData.quarterly_revenue_q1 !== undefined && { quarterly_revenue_q1: dealData.quarterly_revenue_q1 }),
        ...(dealData.quarterly_revenue_q2 !== undefined && { quarterly_revenue_q2: dealData.quarterly_revenue_q2 }),
        ...(dealData.quarterly_revenue_q3 !== undefined && { quarterly_revenue_q3: dealData.quarterly_revenue_q3 }),
        ...(dealData.quarterly_revenue_q4 !== undefined && { quarterly_revenue_q4: dealData.quarterly_revenue_q4 }),
      };
      
      const { error } = await supabase
        .from('deals')
        .insert([dealToInsert]);

      if (error) throw error;

      // Update lead status to 'Converted'
      const { error: leadUpdateError } = await supabase
        .from('leads')
        .update({ lead_status: 'Converted' })
        .eq('id', lead.id);

      if (leadUpdateError) {
        console.error("Error updating lead status:", leadUpdateError);
        throw leadUpdateError; // Throw the error so user knows about it
      }

      toast({
        title: "Success",
        description: "Lead converted to deal successfully",
      });
      
      onSuccess();
      onOpenChange(false);
    } catch (error) {
      console.error("Error converting lead to deal:", error);
      toast({
        title: "Error",
        description: error instanceof Error ? error.message : "Failed to convert lead to deal",
        variant: "destructive",
      });
      throw error;
    }
  };

  // Create initial deal data based on lead with all required fields
  // Keep Project Name blank as requested
  const initialDeal: Deal = {
    id: '', // Will be generated by database
    created_at: new Date().toISOString(),
    modified_at: new Date().toISOString(),
    created_by: null, // Will be set by RLS
    modified_by: null,
    deal_name: `Deal for ${lead.lead_name}`, // This will be the deal name, not project name
    stage: 'Lead',
    project_name: '', // Keep blank as requested
    customer_name: lead.company_name || '',
    lead_name: lead.lead_name,
    lead_owner: lead.created_by ? (displayNames[lead.created_by] || 'Unknown User') : '', // Show display name instead of UUID
    region: lead.country || '',
    priority: 3, // Default priority
  };

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="max-w-6xl max-h-[90vh] overflow-y-auto">
        <DialogHeader>
          <DialogTitle>Convert Lead to Deal</DialogTitle>
        </DialogHeader>
        <DealForm 
          deal={initialDeal}
          isOpen={true}
          onClose={() => onOpenChange(false)}
          onSave={handleSaveDeal}
          isCreating={true}
          initialStage="Lead"
        />
      </DialogContent>
    </Dialog>
  );
};
